---
description: 
globs: 
alwaysApply: true
---
# 🛠️ Implementation Strategy & Automation Tools

## 🎯 **Migration Philosophy**

### **Zero-Downtime Migration**
- ✅ **Parallel Systems**: Run 4Sale DS alongside current design system
- ✅ **Feature Flags**: Gradual rollout with instant rollback capability  
- ✅ **Backward Compatibility**: Existing APIs preserved during transition
- ✅ **Progressive Enhancement**: Migrate page-by-page, not component-by-component

### **API-First Approach**
```typescript
// Keep these imports working during entire migration:
import { Button, Input, Typography } from '../design_system';

// Internally, these will switch from MUI → 4Sale DS
// Without any changes to consuming components
```

---

## 🔧 **Automated Migration Tools**

### **1. Component Usage Analyzer**
```bash
#!/bin/bash
# save as: scripts/analyze-components.sh

echo "📊 Design System Usage Analysis"
echo "================================"

# Count component usage
components=("Button" "Input" "Typography" "Alert" "Card" "Modal" "Accordion")

for component in "${components[@]}"; do
    count=$(grep -r "import.*$component" frontend/src/ --include="*.tsx" --include="*.ts" | wc -l)
    echo "$component: $count usages"
done

echo ""
echo "📁 Files using MUI directly:"
grep -r "@mui" frontend/src/ --include="*.tsx" --include="*.ts" | cut -d: -f1 | sort | uniq

echo ""
echo "📁 Files using custom design system:"
grep -r "design_system" frontend/src/ --include="*.tsx" --include="*.ts" | cut -d: -f1 | sort | uniq
```

### **2. Dependency Updater Script**
```bash
#!/bin/bash
# save as: scripts/update-dependencies.sh

echo "🔄 Updating to 4Sale Design System..."

# Remove MUI dependencies
npm uninstall @mui/material @mui/icons-material @emotion/react @emotion/styled

# Install 4Sale Design System
npm install @4saletech/web-design-system

# Update Tailwind config
echo "📝 Updating tailwind.config.js..."
cat > frontend/tailwind.config.js << 'EOF'
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,ts,jsx,tsx}",
    "./node_modules/@4saletech/web-design-system/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        'sakr': ['sakrPro', 'Inter', 'system-ui', 'sans-serif'],
      },
      colors: {
        primary: {
          DEFAULT: '#1D8EFF',
          50: '#eff8ff',
          500: '#1D8EFF',
          600: '#1570ef',
          700: '#175cd3',
        },
        secondary: {
          DEFAULT: '#0C86AE',
          500: '#0C86AE',
          600: '#0891b2',
        },
      },
    },
  },
  plugins: [],
}
EOF

echo "✅ Dependencies updated!"
```

### **3. Import Path Migrator**
```bash
#!/bin/bash
# save as: scripts/migrate-imports.sh

echo "🔄 Migrating import paths..."

# Replace design system imports (stage 1: update to 4Sale)
find frontend/src/ -name "*.tsx" -o -name "*.ts" | xargs sed -i.bak '
s/from "\.\.\/design_system"/from "@4saletech\/web-design-system"/g
s/from "\.\.\/\.\.\/design_system"/from "@4saletech\/web-design-system"/g
s/from "\.\.\/\.\.\/\.\.\/design_system"/from "@4saletech\/web-design-system"/g
'

# Remove MUI imports
find frontend/src/ -name "*.tsx" -o -name "*.ts" | xargs sed -i.bak '
/from "@mui\/material"/d
/from "@mui\/icons-material"/d
/from "@emotion\/react"/d
/from "@emotion\/styled"/d
'

echo "✅ Import paths migrated!"
echo "💡 Backup files created with .bak extension"
```

### **4. Component API Compatibility Checker**
```typescript
// save as: scripts/compatibility-checker.ts
import fs from 'fs';
import path from 'path';

interface ComponentUsage {
  file: string;
  component: string;
  props: string[];
  line: number;
}

const checkCompatibility = () => {
  const srcDir = './frontend/src';
  const usages: ComponentUsage[] = [];

  // Scan for component usages
  const scanFile = (filePath: string) => {
    const content = fs.readFileSync(filePath, 'utf-8');
    const lines = content.split('\n');

    lines.forEach((line, index) => {
      // Look for component usage patterns
      const componentMatch = line.match(/<(Button|Input|Typography|Alert)[^>]*>/);
      if (componentMatch) {
        const component = componentMatch[1];
        const props = extractProps(line);
        
        usages.push({
          file: filePath,
          component,
          props,
          line: index + 1
        });
      }
    });
  };

  // Recursively scan directories
  const walkDir = (dir: string) => {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        walkDir(fullPath);
      } else if (fullPath.endsWith('.tsx') || fullPath.endsWith('.ts')) {
        scanFile(fullPath);
      }
    });
  };

  walkDir(srcDir);

  // Analyze compatibility
  console.log('🔍 Component Usage Analysis');
  console.log('===========================');
  
  const componentCounts = usages.reduce((acc, usage) => {
    acc[usage.component] = (acc[usage.component] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  Object.entries(componentCounts).forEach(([component, count]) => {
    console.log(`${component}: ${count} usages`);
  });

  // Check for potential API breaking changes
  const breakingChanges = usages.filter(usage => {
    // Define breaking changes for each component
    const breaking = {
      Button: ['startIcon', 'endIcon'], // MUI specific props
      Typography: ['gutterBottom', 'noWrap'], // MUI specific props
      Input: ['InputProps', 'inputProps'], // MUI specific props
    };

    return breaking[usage.component as keyof typeof breaking]?.some(
      prop => usage.props.includes(prop)
    );
  });

  if (breakingChanges.length > 0) {
    console.log('\n⚠️  Potential Breaking Changes:');
    breakingChanges.forEach(usage => {
      console.log(`${usage.file}:${usage.line} - ${usage.component}`);
    });
  }
};

const extractProps = (line: string): string[] => {
  const props: string[] = [];
  const propMatches = line.matchAll(/(\w+)=/g);
  for (const match of propMatches) {
    props.push(match[1]);
  }
  return props;
};

checkCompatibility();
```

---

## 🏗️ **Implementation Patterns**

### **1. Parallel Component Strategy**
```typescript
// src/design_system/index.ts
// During migration, support both systems

// Phase 1: Current state
export { Button } from './primitives/Button'; // MUI-based

// Phase 2: Gradual migration
export { Button } from './primitives/Button_4Sale'; // 4Sale-based
export { Button as ButtonMUI } from './primitives/Button'; // Keep MUI as fallback

// Phase 3: Final state
export { Button } from '@4saletech/web-design-system';
```

### **2. Feature Flag Implementation**
```typescript
// src/utils/featureFlags.ts
export const USE_4SALE_DS = process.env.REACT_APP_USE_4SALE_DS === 'true';

// src/design_system/primitives/Button.tsx
import React from 'react';
import { USE_4SALE_DS } from '../../utils/featureFlags';

// Conditional component loading
const ButtonComponent = USE_4SALE_DS 
  ? React.lazy(() => import('@4saletech/web-design-system').then(m => ({ default: m.Button })))
  : React.lazy(() => import('./Button_MUI'));

export const Button = (props: ButtonProps) => (
  <React.Suspense fallback={<div>Loading...</div>}>
    <ButtonComponent {...props} />
  </React.Suspense>
);
```

### **3. API Compatibility Layer**
```typescript
// src/design_system/compatibility/Button.tsx
import React from 'react';
import { Button as FourSaleButton } from '@4saletech/web-design-system';

interface LegacyButtonProps {
  variant?: 'elevated' | 'filled' | 'outlined' | 'text';
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  // ... other legacy props
}

export const Button: React.FC<LegacyButtonProps> = ({
  variant = 'filled',
  startIcon,
  endIcon,
  children,
  ...props
}) => {
  // Map legacy props to 4Sale DS props
  const mappedVariant = mapVariant(variant);
  
  return (
    <FourSaleButton
      variant={mappedVariant}
      prefix={startIcon}
      suffix={endIcon}
      {...props}
    >
      {children}
    </FourSaleButton>
  );
};

const mapVariant = (legacyVariant: string) => {
  const mapping = {
    'elevated': 'primary',
    'filled': 'primary',
    'outlined': 'outline',
    'text': 'ghost'
  };
  return mapping[legacyVariant] || 'primary';
};
```

---

## 📊 **Testing Strategy**

### **1. Unit Testing Pattern**
```typescript
// src/design_system/__tests__/Button.test.tsx
import { render, screen } from '@testing-library/react';
import { Button } from '../primitives/Button';

describe('Button Component Migration', () => {
  it('should maintain API compatibility', () => {
    render(
      <Button variant="outlined" startIcon={<span>icon</span>}>
        Click me
      </Button>
    );
    
    expect(screen.getByRole('button')).toBeInTheDocument();
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('should handle legacy props correctly', () => {
    // Test that old MUI props still work
    render(<Button gutterBottom>Legacy Button</Button>);
    expect(screen.getByRole('button')).toHaveClass('mb-2');
  });
});
```

### **2. Visual Regression Testing**
```typescript
// src/__tests__/visual-regression.test.tsx
import { render } from '@testing-library/react';
import { LoginPage } from '../pages/Login';

describe('Visual Regression Tests', () => {
  it('Login page should look identical after migration', async () => {
    const { container } = render(<LoginPage />);
    
    // Compare against baseline screenshot
    await expect(container).toMatchSnapshot();
  });
});
```

### **3. Performance Testing**
```typescript
// scripts/performance-test.js
const lighthouse = require('lighthouse');
const chromeLauncher = require('chrome-launcher');

const runPerformanceTest = async () => {
  const chrome = await chromeLauncher.launch({chromeFlags: ['--headless']});
  
  const options = {
    logLevel: 'info',
    output: 'json',
    onlyCategories: ['performance'],
    port: chrome.port,
  };

  // Test before migration
  const beforeResults = await lighthouse('http://localhost:3000', options);
  
  // Test after migration  
  const afterResults = await lighthouse('http://localhost:3000', options);
  
  console.log('Performance Comparison:');
  console.log(`Before: ${beforeResults.lhr.categories.performance.score * 100}`);
  console.log(`After: ${afterResults.lhr.categories.performance.score * 100}`);
  
  await chrome.kill();
};
```

---

## 🚀 **Deployment Strategy**

### **1. Blue-Green Deployment**
```bash
# Deploy to staging with 4Sale DS
npm run build:4sale
npm run deploy:staging

# Test thoroughly on staging
npm run test:e2e:staging

# Deploy to production gradually
npm run deploy:production:canary  # 10% traffic
npm run deploy:production:partial # 50% traffic  
npm run deploy:production:full    # 100% traffic
```

### **2. Rollback Plan**
```bash
#!/bin/bash
# save as: scripts/rollback.sh

echo "🔄 Rolling back to MUI design system..."

# Restore package.json
git checkout HEAD~1 -- package.json
npm install

# Restore import paths
find frontend/src/ -name "*.bak" | while read backup; do
    original="${backup%.bak}"
    mv "$backup" "$original"
done

# Rebuild and redeploy
npm run build
npm run deploy

echo "✅ Rollback complete!"
```

### **3. Monitoring & Alerts**
```typescript
// src/utils/monitoring.ts
export const trackMigrationMetrics = () => {
  // Track component render errors
  window.addEventListener('error', (error) => {
    if (error.message.includes('4saletech')) {
      analytics.track('migration_error', {
        error: error.message,
        component: extractComponentName(error.stack),
        timestamp: Date.now()
      });
    }
  });

  // Track performance metrics
  const observer = new PerformanceObserver((list) => {
    list.getEntries().forEach((entry) => {
      analytics.track('performance_metric', {
        name: entry.name,
        duration: entry.duration,
        timestamp: Date.now()
      });
    });
  });
  
  observer.observe({ entryTypes: ['measure', 'navigation'] });
};
```

This comprehensive strategy ensures a smooth, zero-downtime migration to the 4Sale Design System while maintaining all existing functionality and allowing for instant rollback if needed. 